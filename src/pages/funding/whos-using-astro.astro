---
import DocsLayout from 'project:layouts/docs/docs-layout.astro'

const title = 'Who\'s Using Astro'
const description = 'Usage statistics and impact metrics for the AstroUXDS design system, showcasing adoption across program offices, applications, and organizations.'

// Static metrics (manually updated)
const staticStats = {
  programOffices: 4,
  applications: '60+',
  organizations: 40,
  acquisitionAuthorities: 2
}

// NPM packages to track
const npmPackages = [
  { package: '@astrouxds/astro-web-components', label: 'Web Components' },
  { package: '@astrouxds/ag-grid-theme', label: 'agGrid Theme' },
  { package: '@astrouxds/tailwind', label: 'Tailwind Theme' },
  { package: '@astrouxds/tokens', label: 'Design Tokens' },
  { package: '@astrouxds/angular', label: 'Angular Wrapper' },
  { package: '@astrouxds/react', label: 'React Wrapper' }
]

// Date utilities function
const createDateHelper = () => {
  const now = new Date()
  const currentYear = now.getFullYear()
  const previousYear = currentYear - 1
  const yesterday = new Date(now)
  yesterday.setDate(yesterday.getDate() - 1)

  return {
    currentYear,
    previousYear,
    yesterdayString: yesterday.toISOString().split('T')[0],
    elapsedMonths: now.getMonth() + 1 // getMonth() is 0-based
  }
}

// Initialize date helper
const dates = createDateHelper()

// Fetch NPM download data for the last 30 days and YTD
const npmStats = await Promise.all(
  npmPackages.map(async (pkg) => {
    try {
      // Fetch last 30 days
      const response30Days = await fetch(`https://api.npmjs.org/downloads/range/last-month/${pkg.package}`)
      const data30Days = await response30Days.json()

      // Fetch YTD data
      const responseYTD = await fetch(`https://api.npmjs.org/downloads/range/${dates.currentYear}-01-01:${dates.yesterdayString}/${pkg.package}`)
      const dataYTD = await responseYTD.json()

      let downloads30Days = 0
      let downloadsYTD = 0

      if (data30Days.downloads && Array.isArray(data30Days.downloads)) {
        downloads30Days = data30Days.downloads.reduce((sum: number, day: any) => sum + day.downloads, 0)
      }

      if (dataYTD.downloads && Array.isArray(dataYTD.downloads)) {
        downloadsYTD = dataYTD.downloads.reduce((sum: number, day: any) => sum + day.downloads, 0)
      }

      return {
        package: pkg.package.split('/')[1], // Remove @astrouxds/ prefix for display
        downloads30Days,
        downloadsYTD,
        label: pkg.label
      }
    } catch (error) {
      console.error(`Error fetching data for ${pkg.package}:`, error)
      return {
        package: pkg.package.split('/')[1],
        downloads30Days: 0,
        downloadsYTD: 0,
        label: pkg.label
      }
    }
  })
)

// === COST CALCULATIONS (REFACTORED FOR MAINTAINABILITY) ===
// This section calculates annual savings based on NPM download data.
// Refactored to be resilient to time changes and reduce code repetition.

// Savings calculation constants
const savingsConstants = {
  fullyLoadedFTE: 238000,
  efficiency: 0.25,
  npmInflationFactor: 125,
  fallbackAnnualDownloads: 190000 // Known baseline for verification
}

// Generic function to fetch download data for any date range
const fetchDownloadData = async (startDate: string, endDate: string, packageName: string = '@astrouxds/astro-web-components') => {
  try {
    const response = await fetch(`https://api.npmjs.org/downloads/range/${startDate}:${endDate}/${packageName}`)
    const data = await response.json()

    if (data.downloads && Array.isArray(data.downloads)) {
      return data.downloads.reduce((sum: number, day: any) => sum + day.downloads, 0)
    }
    return 0
  } catch (error) {
    console.error(`Error fetching download data for ${packageName} (${startDate} to ${endDate}):`, error)
    return 0
  }
}

// Calculate savings based on downloads and time period
const calculateSavings = (totalDownloads: number, months: number = 12) => {
  const averageMonthlyDownloads = totalDownloads / months
  const totalUsers = averageMonthlyDownloads / savingsConstants.npmInflationFactor
  const annualSavings = (savingsConstants.fullyLoadedFTE * totalUsers) * savingsConstants.efficiency

  return {
    averageMonthlyDownloads,
    totalUsers: Math.round(totalUsers),
    annualSavings,
    actualSavings: annualSavings * (months / 12)
  }
}

// Fetch previous year's complete data for baseline
const previousYearDownloads = await fetchDownloadData(
  `${dates.previousYear}-01-01`,
  `${dates.previousYear}-12-31`
) || savingsConstants.fallbackAnnualDownloads

// Fetch current year downloads up to yesterday
const currentYearDownloads = await fetchDownloadData(
  `${dates.currentYear}-01-01`,
  dates.yesterdayString
)

// Calculate savings for both periods
const previousYearStats = calculateSavings(previousYearDownloads, 12)
const currentYearStats = calculateSavings(currentYearDownloads, dates.elapsedMonths)

// Legacy variable names for template compatibility
const annualSavings = previousYearStats.annualSavings
const currentYear = dates.currentYear
const elapsedMonths = dates.elapsedMonths
const actualCurrentSavings = currentYearStats.actualSavings
---

<DocsLayout content={{ title, description }} file={import.meta.url}>
  <div class="stats-page">


    <!-- Stats Grid -->
    <div class="stats-grid">
      <!-- Current Year Savings - Featured Widget (spans 2 columns) -->
      <div class="stat-card current-savings-card featured-card">
        <h3>{currentYear} Current Savings</h3>
        <div class="current-savings-display">
          <!-- Prominent Actual Savings YTD -->
          <div class="featured-savings">
            <div class="actual-savings-featured">
              <div class="savings-amount-hero" id="live-savings">$<span id="savings-counter">{Math.round(actualCurrentSavings).toLocaleString('en-US')}</span></div>
              <div class="savings-label-hero">Cost Savings YTD</div>
            </div>
          </div>

          <!-- Supporting Stats in Grid -->
          <div class="supporting-stats">
            <div class="supporting-stat">
              <span class="stat-number">${Math.round(annualSavings).toLocaleString()}</span>
              <span class="stat-label">{dates.previousYear} Baseline</span>
            </div>
          </div>

          <cite class="stat-detail">
            Savings data is based on Knapsack.com’s Design System ROI calculator and 2025 GSA data for fully burdened GS15 rate in Colorado Springs, CO
          </cite>
        </div>
      </div>

      <!-- Downloads -->
      <div class="stat-card downloads-card featured-card">
        <h3>Downloads</h3>
        <div class="downloads-table">
          <div class="downloads-header">
            <div class="package-header">Package</div>
            <div class="metric-header">Last 30 Days</div>
            <div class="metric-header">YTD {dates.currentYear}</div>
            <div class="metric-header">Growth Rate</div>
          </div>
          {npmStats.map((stat) => {
            // Calculate monthly average from YTD to estimate growth
            const monthlyAvgFromYTD = stat.downloadsYTD / dates.elapsedMonths
            const growthRate = stat.downloads30Days > 0 ? ((monthlyAvgFromYTD / stat.downloads30Days - 1) * 100) : 0

            return (
              <div class="download-row">
                <div class="package-name">
                  <span class="package-label">{stat.label}</span>
                  <span class="package-code">{stat.package}</span>
                </div>
                <div class="download-metric-cell">
                  <span class="download-number">{stat.downloads30Days.toLocaleString()}</span>
                </div>
                <div class="download-metric-cell">
                  <span class="download-number ytd">{stat.downloadsYTD.toLocaleString()}</span>
                  <span class="download-subtitle">({Math.round(monthlyAvgFromYTD).toLocaleString()}/mo avg)</span>
                </div>
                <div class="download-metric-cell">
                  <span class={`growth-indicator ${growthRate > 0 ? 'positive' : growthRate < 0 ? 'negative' : 'neutral'}`}>
                    {growthRate > 0 ? '↗' : growthRate < 0 ? '↘' : '→'} {Math.abs(growthRate).toFixed(1)}%
                  </span>
                </div>
              </div>
            )
          })}
        </div>
        <div class="downloads-summary">
          <div class="summary-stat">
            <span class="summary-number">{npmStats.reduce((sum, stat) => sum + stat.downloads30Days, 0).toLocaleString()}</span>
            <span class="summary-label">Total 30-Day Downloads</span>
          </div>
          <div class="summary-stat">
            <span class="summary-number">{npmStats.reduce((sum, stat) => sum + stat.downloadsYTD, 0).toLocaleString()}</span>
            <span class="summary-label">Total YTD Downloads</span>
          </div>
        </div>
      </div>

      <!-- Adoption & Organizations -->
      <div class="stat-card adoption-organizations-card featured-card">
        <h3>Adoption Metrics</h3>
        <div class="adoption-stats">
          <div class="adoption-item">
            <span class="adoption-number">{staticStats.programOffices}</span>
            <span class="adoption-label">Program Offices</span>
          </div>
          <div class="adoption-item">
            <span class="adoption-number">{staticStats.applications}</span>
            <span class="adoption-label">Applications</span>
          </div>
          <div class="adoption-item">
            <span class="adoption-number">{staticStats.organizations}</span>
            <span class="adoption-label">Organizations</span>
          </div>
          <div class="adoption-item">
            <span class="adoption-number">{staticStats.acquisitionAuthorities}</span>
            <span class="adoption-label">Acquisition Authorities</span>
          </div>
        </div>

        <h2>Organizations Using Astro</h2>
        <div class="organizations-text-grid">
          <div class="org-text-item">Agile SRC</div>
          <div class="org-text-item">ai Solutions</div>
          <div class="org-text-item">Ball Aerospace</div>
          <div class="org-text-item">BlueHalo</div>
          <div class="org-text-item">Boeing</div>
          <div class="org-text-item">Braxton</div>
          <div class="org-text-item">CACI/BitSystems</div>
          <div class="org-text-item">Capgemini</div>
          <div class="org-text-item">Cosmic AES</div>
          <div class="org-text-item">Cosmos/OpenC3</div>
          <div class="org-text-item">DASA</div>
          <div class="org-text-item">Dragon Army</div>
          <div class="org-text-item">EGS</div>
          <div class="org-text-item">General Dynamics</div>
          <div class="org-text-item">GENESIS</div>
          <div class="org-text-item">Interactivism</div>
          <div class="org-text-item">Iridium</div>
          <div class="org-text-item">IS4S</div>
          <div class="org-text-item">Joint AI Center (JAIC)</div>
          <div class="org-text-item">KBR</div>
          <div class="org-text-item">Kratos</div>
          <div class="org-text-item">L3/Harris</div>
          <div class="org-text-item">LeoLabs</div>
          <div class="org-text-item">Lockheed Martin</div>
          <div class="org-text-item">NRL</div>
          <div class="org-text-item">Northrop Grumman</div>
          <div class="org-text-item">Outside Analytics</div>
          <div class="org-text-item">Peraton</div>
          <div class="org-text-item">Raft</div>
          <div class="org-text-item">Raytheon/RTX</div>
          <div class="org-text-item">SevOneTech</div>
          <div class="org-text-item">SIAP</div>
          <div class="org-text-item">Slingshot</div>
          <div class="org-text-item">Space Dynamics Laboratory</div>
          <div class="org-text-item">SpaceCAMP</div>
          <div class="org-text-item">SpaceRCO</div>
          <div class="org-text-item">R2C2</div>
          <div class="org-text-item">Spiner</div>
          <div class="org-text-item">SSC</div>
          <div class="org-text-item">SZYO</div>
          <div class="org-text-item">Synaptech</div>
        </div>
      </div>
    </div>
  </div>
</DocsLayout>

<script define:vars={{
  initialSavings: Math.round(actualCurrentSavings),
  elapsedMonthsValue: elapsedMonths
}}>
  // Live savings counter
  document.addEventListener('DOMContentLoaded', function () {
    const savingsCounter = document.getElementById('savings-counter')

    if (!savingsCounter) return

    // Calculate savings per second
    // Take the current rate (actual savings / elapsed time) and project it forward
    const daysElapsed = (elapsedMonthsValue * 30.44) // Average days per month
    const hoursElapsed = daysElapsed * 24
    const secondsElapsed = hoursElapsed * 3600

    const savingsPerSecond = initialSavings / secondsElapsed

    let currentValue = initialSavings

    // Update counter every second
    setInterval(() => {
      currentValue += savingsPerSecond

      // Format and update the display
      const formattedValue = Math.round(currentValue).toLocaleString('en-US')
      savingsCounter.textContent = formattedValue
    }, 1000)

    // Add subtle animation to indicate it's live
    savingsCounter.style.transition = 'all 0.5s ease'
  })
</script>

<style>
.stats-page {
  /* Layout */
  max-inline-size: 1200px;
  margin-inline: auto;
}

.page-intro {
  /* Layout */
  margin-block: 6--step 12--step;

  /* Text */
  font-size: 20--rpx;
  line-height: max(28 / 20);
  color: #666;
}

/* Hero Savings Card */
.hero-card {
  /* Layout */
  margin-block-end: 12--step;
}

.savings-card {
  /* Appearance */
  background: transparent;
  border: 2px solid #000;
  border-radius: 12--rpx;
  color: #000;
  text-align: center;
  padding: 12--step;

  /* Effects */
  box-shadow: none;
}

.savings-title {
  /* Text */
  font-size: 28--rpx;
  font-weight: 500;
  margin-block-end: 6--step;
  letter-spacing: -0.02em;
}

.savings-amount {
  /* Text */
  font-size: clamp(48--rpx, 8vw, 80--rpx);
  font-weight: 700;
  line-height: 1;
  margin-block-end: 4--step;
  letter-spacing: -0.03em;
}

.savings-formula {
  /* Layout */
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 3--step;
  margin-block-end: 6--step;
  flex-wrap: wrap;

  /* Text */
  font-size: 16--rpx;
  opacity: 0.9;
}

.formula-part {
  /* Appearance */
  background: rgba(255, 255, 255, 0.2);
  border-radius: 6--rpx;
  padding: 1--step 3--step;
}

.operator {
  /* Text */
  font-weight: 700;
  font-size: 18--rpx;
}

.live-indicator {
  /* Layout */
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 2--step;

  /* Text */
  font-size: 14--rpx;
  opacity: 0.8;
}

.pulse-dot {
  /* Layout */
  inline-size: 8px;
  block-size: 8px;

  /* Appearance */
  background: currentColor;
  border-radius: 50%;

  /* Animation */
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.4; }
}

/* Stats Grid */
.stats-grid {
  /* Layout */
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 8--step;
  margin-block-end: 12--step;
}

.stat-card {
  /* Appearance */
  background: transparent;
  border: 1px solid #000;
  border-radius: 8--rpx;
  padding: 8--step;

  /* Effects */
  transition: none;

  & h3 {
    /* Text */
    font-size: 20--rpx;
    font-weight: 500;
    margin-block-end: 6--step;
    color: #000;
    border-block-end: 1px solid #000;
    padding-block-end: 4--step;
  }
}

/* Featured Card - Spans 2 columns */
.featured-card {
  grid-column: 1 / -1;

  /* Enhanced appearance */
  background: transparent;
  border: 2px solid #000;
  box-shadow: none;

  & h3 {
    font-size: 24--rpx;
    color: #000;
    border-color: #000;
  }
}

/* Adoption Card */
.adoption-stats {
  /* Layout */
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 8--step;
}

.adoption-item {
  /* Layout */
  text-align: center;
}

.adoption-number {
  /* Layout */
  display: block;

  /* Text */
  font-size: 36--rpx;
  font-weight: 700;
  color: #000;
  line-height: 1;
  margin-block-end: 2--step;
}

.adoption-label {
  /* Text */
  font-size: 14--rpx;
  color: #666;
  font-weight: 500;
}

/* Organizations Card */
.organizations-grid {
  /* Layout */
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 6--step;
  margin-block-end: 8--step;
}

.organization-item {
  /* Layout */
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 3--step;
  padding: 4--step;

  /* Appearance */
  background: transparent;
  border: 1px solid #000;
  border-radius: 8--rpx;
  transition: none;
}

.org-logo {
  /* Layout */
  block-size: 48px;
  inline-size: auto;
  max-inline-size: 120px;

  /* Appearance */
  object-fit: contain;
  filter: brightness(1);
  transition: none;
}

.org-name {
  /* Text */
  font-size: 12--rpx;
  font-weight: 500;
  color: #000;
  text-align: center;
  line-height: 1.3;
}

.organizations-text-grid {
  /* Layout */
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 3--step;
  padding-block-start: 6--step;
  border-block-start: 1px solid var(--Grey700Color);
}

.org-text-item {
  /* Layout */
  padding: 2--step 3--step;

  /* Text */
  font-size: 13--rpx;
  color: #666;
  text-align: center;
  line-height: 1.4;

  /* Appearance */
  background: transparent;
  border-radius: 4--rpx;
  border: 1px solid #000;
  transition: none;
}

/* Savings Display */
.savings-display {
  /* Layout */
  text-align: center;
}

.savings-display .savings-amount {
  /* Layout */
  display: block;

  /* Text */
  font-size: 36--rpx;
  font-weight: 700;
  color: #000;
  line-height: 1;
  margin-block-end: 2--step;
}

.savings-note {
  /* Text */
  font-size: 14--rpx;
  color: #666;
  font-style: italic;
  margin-block-end: 3--step;
}

.savings-breakdown {
  /* Layout */
  margin-block-start: 2--step;

  & small {
    /* Text */
    font-size: 12--rpx;
    color: #666;
    opacity: 0.8;
  }
}

/* Current Year Savings */
.current-savings-display {
  /* Layout */
  text-align: center;
}

/* Featured Savings Hero Section */
.featured-savings {
  margin-block-end: 8--step;
}

.actual-savings-featured {
  padding: 6--step;
  background: transparent;
  border: 2px solid #000;
  border-radius: 12--rpx;
  color: #000;
  margin-block-end: 6--step;
}

.savings-amount-hero {
  font-size: clamp(48--rpx, 8vw, 72--rpx);
  font-weight: 700;
  line-height: 1;
  margin-block-end: 3--step;
  letter-spacing: -0.03em;
}

.savings-label-hero {
  font-size: 18--rpx;
  font-weight: 500;
  opacity: 0.95;
}

.live-indicator {
  font-size: 12--rpx;
  font-weight: 600;
  color: #008000;
  text-shadow: none;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.6; }
}

/* Supporting Stats Grid */
.supporting-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 4--step;
  margin-block-end: 6--step;
}

.supporting-stat {
  text-align: center;
  padding: 4--step;
  background: transparent;
  border-radius: 8--rpx;
  border: 1px solid var(--Grey700Color);
}

.stat-number {
  display: block;
  font-size: 20--rpx;
  font-weight: 700;
  color: #000;
  line-height: 1;
  margin-block-end: 2--step;
}

.stat-label {
  font-size: 12--rpx;
  color: #666;
  font-weight: 500;
  line-height: 1.3;
}

.downloads-ytd {
  /* Layout */
  margin-block-end: 4--step;
}

.downloads-number {
  /* Layout */
  display: block;

  /* Text */
  font-size: 32--rpx;
  font-weight: 700;
  color: #000080;
  line-height: 1;
  margin-block-end: 2--step;
}

.downloads-label {
  /* Text */
  font-size: 14--rpx;
  color: #666;
  font-weight: 500;
}

.users-ytd {
  /* Layout */
  margin-block-end: 4--step;
}

.users-number {
  /* Layout */
  display: block;

  /* Text */
  font-size: 28--rpx;
  font-weight: 700;
  color: #000080;
  line-height: 1;
  margin-block-end: 2--step;
}

.users-label {
  /* Text */
  font-size: 13--rpx;
  color: #666;
  font-weight: 500;
}

.monthly-breakdown {
  /* Layout */
  margin-block-end: 4--step;
  padding: 3--step;

  /* Appearance */
  background: transparent;
  border-radius: 6--rpx;
  border: 1px solid var(--Grey700Color);
}

.monthly-stat {
  /* Layout */
  text-align: center;
}

.monthly-number {
  /* Layout */
  display: block;

  /* Text */
  font-size: 20--rpx;
  font-weight: 600;
  color: #4B0082;
  line-height: 1;
  margin-block-end: 1--step;
}

.monthly-label {
  /* Text */
  font-size: 12--rpx;
  color: #666;
  font-weight: 500;
}

/* Current Savings Breakdown */
.current-savings-breakdown {
  /* Layout */
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4--step;
  margin-block-end: 4--step;
}

.actual-savings, .projected-savings {
  /* Layout */
  text-align: center;
  padding: 3--step;

  /* Appearance */
  background: transparent;
  border-radius: 6--rpx;
  border: 1px solid var(--Grey700Color);
}

.savings-amount.actual {
  /* Text */
  font-size: 18--rpx;
  font-weight: 700;
  color: #000;
  line-height: 1;
  margin-block-end: 2--step;
}

.savings-amount.projected {
  /* Text */
  font-size: 18--rpx;
  font-weight: 700;
  color: #000080;
  line-height: 1;
  margin-block-end: 2--step;
}

.savings-label {
  /* Text */
  font-size: 11--rpx;
  color: #666;
  font-weight: 500;
  line-height: 1.3;
}

.coming-soon {
  /* Text */
  font-style: italic;
  opacity: 0.7;

  & small {
    font-size: 12--rpx;
    color: #666;
  }
}

/* Downloads Card */
.downloads-table {
  /* Layout */
  display: flex;
  flex-direction: column;
  gap: 2--step;
}

.downloads-header {
  /* Layout */
  display: grid;
  grid-template-columns: 2fr 1fr 1.5fr 1fr;
  gap: 4--step;
  padding: 3--step 4--step;

  /* Appearance */
  background: transparent;
  border-radius: 6--rpx;
  border: 1px solid var(--Grey700Color);
}

.package-header,
.metric-header {
  /* Text */
  font-size: 12--rpx;
  font-weight: 600;
  color: #666;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.download-row {
  /* Layout */
  display: grid;
  grid-template-columns: 2fr 1fr 1.5fr 1fr;
  gap: 4--step;
  padding: 4--step;
  align-items: center;

  /* Appearance */
  border-radius: 6--rpx;
  border: 1px solid transparent;
  transition: none;
}

.package-name {
  /* Layout */
  display: flex;
  flex-direction: column;
  gap: 1--step;
}

.package-label {
  /* Text */
  font-size: 14--rpx;
  font-weight: 500;
  color: #000;
}

.package-code {
  /* Text */
  font-size: 11--rpx;
  color: #666;
  font-family: monospace;
  opacity: 0.8;
}

.download-metric-cell {
  /* Layout */
  display: flex;
  flex-direction: column;
  gap: 1--step;
  text-align: right;
}

.download-number {
  /* Text */
  font-size: 16--rpx;
  font-weight: 600;
  color: #000;
}

.download-number.ytd {
  color: #000;
}

.download-subtitle {
  /* Text */
  font-size: 10--rpx;
  color: #666;
  opacity: 0.8;
}

.growth-indicator {
  /* Text */
  font-size: 14--rpx;
  font-weight: 600;
  text-align: center;
}

.growth-indicator.positive {
  color: var(--Status4Color); /* Green */
}

.growth-indicator.negative {
  color: var(--Status1Color); /* Red */
}

.growth-indicator.neutral {
  color: #666;
}

.downloads-summary {
  /* Layout */
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4--step;
  margin-block-start: 6--step;
  padding-block-start: 4--step;
  border-block-start: 1px solid var(--Grey700Color);
}

.summary-stat {
  /* Layout */
  text-align: center;
  padding: 3--step;

  /* Appearance */
  background: transparent;
  border-radius: 6--rpx;
  border: 1px solid var(--Grey700Color);
}

.summary-number {
  /* Layout */
  display: block;

  /* Text */
  font-size: 20--rpx;
  font-weight: 700;
  color: #000;
  line-height: 1;
  margin-block-end: 2--step;
}

.summary-label {
  /* Text */
  font-size: 12--rpx;
  color: #666;
  font-weight: 500;
}

/* Impact Card */
.impact-stats {
  /* Layout */
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 6--step;
}

.impact-item {
  /* Layout */
  text-align: center;
}

.impact-number {
  /* Layout */
  display: block;

  /* Text */
  font-size: 28--rpx;
  font-weight: 700;
  color: #000;
  line-height: 1;
  margin-block-end: 2--step;
}

.impact-label {
  /* Text */
  font-size: 14--rpx;
  color: #666;
  font-weight: 500;
}

/* Placeholder Cards */
.placeholder-content {
  /* Layout */
  text-align: center;
  padding: 8--step;
}

.placeholder-icon {
  /* Text */
  font-size: 48--rpx;
  margin-block-end: 4--step;
  opacity: 0.6;
}

.placeholder-content p {
  /* Text */
  color: #666;
  font-style: italic;
}

/* Methodology Note */
.methodology-note {
  /* Appearance */
  background: transparent;
  border: 1px solid var(--Grey700Color);
  border-radius: 8--rpx;
  padding: 8--step;

  & h3 {
    /* Text */
    font-size: 18--rpx;
    margin-block-end: 4--step;
    color: #000;
  }

  & p {
    /* Text */
    color: #666;
    line-height: max(24 / 16);
  }

  & a {
    /* Appearance */
    color: #000;
  }
}

/* Responsive Design */
@media (width < 768px) {
  .stats-grid {
    grid-template-columns: 1fr;
  }

  .featured-card {
    grid-column: 1;
  }

  .supporting-stats {
    grid-template-columns: repeat(2, 1fr);
  }

  .savings-amount-hero {
    font-size: clamp(36--rpx, 12vw, 48--rpx);
  }

  .adoption-stats {
    grid-template-columns: repeat(2, 1fr);
    gap: 4--step;
  }

  .organizations-grid,
  .organizations-text-grid {
    grid-template-columns: 1fr;
    gap: 3--step;
  }

  .organizations-grid {
    margin-block-end: 6--step;
  }

  .download-row,
  .downloads-header {
    grid-template-columns: 1fr;
    gap: 2--step;
  }

  .downloads-header {
    display: none; /* Hide headers on mobile */
  }

  .download-row {
    padding: 3--step;
    border: 1px solid var(--Grey700Color);
    border-radius: 6--rpx;
    margin-block-end: 3--step;
  }

  .download-metric-cell {
    text-align: left;
  }

  .downloads-summary {
    grid-template-columns: 1fr;
  }

  .impact-stats {
    grid-template-columns: 1fr;
  }

  .savings-formula {
    flex-direction: column;
    gap: 2--step;
  }
}
</style>