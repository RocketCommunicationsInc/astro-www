---
export type Props = (
	{
		implicitlabel?: boolean
	} & (
		{ type: 'menu', name: string } |
		{ type: 'toggle', name: string, checked?: boolean } |
		{ type: 'text', name: string, value: string } |
		{ type: 'number', name: string, value: string }
	)
)

const { type, 'implicitlabel': implicitLabel, ...attrs } = Astro.props
---
<p class="field">
	{
		implicitLabel
			? null
		: (
			<label class="-label">{attrs.name}</label>
		)
	}
	{
		type === 'menu'
			? (
				<select class="-control -is-menu" {...attrs}>
					<slot />
				</select>
			)
		: type === 'toggle'
			? <input class="-control -is-toggle" type="checkbox" {...attrs} />
		: <input class="-control -is-text" type={type} {...attrs} />
	}
</p>
<style is:global>
/* Field */

.field {
	display: flex;

	/* Layout */
	flex-flow: column;

	&:where(p) {
		/* Layout */
		margin-block: 0;
	}

	& .-label {
		/* Text */
		font-weight: 500;

		/* Appearance */
		color: var(--Grey800Color);

		& + * {
			/* Layout */
			margin-block-start: 4--rpx;
		}
	}

	& .-control {
		&.-is-menu {
			/* Layout */
			inline-size: stretch;
			max-inline-size: calc(100% - 1rem);
			padding: .5em 1em;

			/* Appearance */
			border-radius: .25em;
			border-radius: var(--EdgeRadius);
			box-shadow: var(--EdgeColor) 0 0 0 var(--EdgeSize) inset;

			/* Reference */
			--EdgeColor: var(--Grey300Color);
		}

		&.-is-text {
			/* Layout */
			inline-size: stretch;
			max-inline-size: calc(100% - 1rem);
			padding: .5em 1em;

			/* Appearance */
			border-radius: .25em;
			border-radius: var(--EdgeRadius);
			box-shadow: var(--EdgeColor) 0 0 0 var(--EdgeSize) inset;

			/* Reference */
			--EdgeColor: var(--Grey300Color);
		}

		&.-is-toggle {
			display: grid;

			/* Layout */
			align-items: center;

			/* Appearance */
			appearance: none;
			cursor: pointer;
			inline-width: min-content;

			/* Reference */
			--BackColor: var(--Grey200Color);
			--EdgeColor: var(--DarkBlue500Color);
			--EdgeRadius: var(--RoundRadius);

			&::before {
				display: inline-block;
				content: "";

				/* Layout */
				grid-area: 1 / 1;
				width: 32--rpx;
				height: 12--rpx;

				/* Appearance */
				background-color: var(--BackColor);
				border-radius: var(--EdgeRadius);
				box-shadow: var(--EdgeColor) 0 0 0 var(--EdgeSize) inset;

				/* Animation */
				transition: background-color 80ms;
			}

			&:checked::before {
				/* Reference */
				--BackColor: var(--DarkBlue500Color);
			}

			&::after {
				display: block;
				content: "";

				/* Layout */
				grid-area: 1 / 1;
				width: 20px;
				height: 20px;

				/* Appearance */
				background-color: var(--BackColor);
				border-radius: var(--EdgeRadius);
				box-shadow: var(--EdgeColor) 0 0 0 var(--EdgeSize) inset;

				/* Animation */
				transition: translate 80ms;
			}

			&:checked::after {
				/* Animation */
				translate: 12--rpx 0;
			}
		}
	}
}
</style>
<script>

const global = globalThis as any as {
	$target: HTMLElement
}

type IsEqualConsideringWritability<OriginalType, WritableType> = (
	<Type>() => Type extends OriginalType
		? 1
	: 2
) extends <Type>() => Type extends WritableType
	? 1
: 2
	? true
: false

type Writable<Type> = {
	-readonly [Key in keyof Type]: Type[Key]
}

type IsFullyWritable<Type extends object> = IsEqualConsideringWritability<
	{
		[Key in keyof Type]: Type[Key]
	},
	Writable<{
		[Key in keyof Type]: Type[Key]
	}>
>

type WritableKeys<Type extends {}> = {
	[Key in keyof Type]-?: IsFullyWritable<Pick<Type, Key>> extends true ? Key : never;
}[keyof Type]

/* Field */

window.addEventListener('input', ({ target }) => {
	const element = target as HTMLElement
	const control = element.closest < HTMLInputElement > ('.field .-control[name]')

	if (control === null) return

	const $target = global.$target

	const isToggle = control.type === 'checkbox'

	const label = control.name as WritableKeys<HTMLElement>
	const value = isToggle ? control.checked : control.value

	$target[label] = value as never
}, { capture: true })

</script>