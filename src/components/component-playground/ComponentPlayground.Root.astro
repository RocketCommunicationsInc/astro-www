---
import Panelset from './ComponentPlayground.Panelset.astro'
import Panel from './ComponentPlayground.Panel.astro'
import Main from './ComponentPlayground.Main.astro'
---
<html class="dark-theme" lang="en-US">
	<head>
		<title>Playground</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
	</head>
	<body class="app">
		<section class="sandbox-area">
			<Main class="dark-theme">
				<slot />
			</Main>
		</section>

		<section class="control-area"><Panelset>{
			Astro.slots.has('variants')
				? <Panel label="Variants"><slot name="variants" /></Panel>
			: null
		}{
			Astro.slots.has('controls')
				? <Panel label="Properties"><slot name="controls" /></Panel>
			: null
		}</Panelset></section>
	</body>
</html>

<style is:global>

/* Baseline */

* {
	box-sizing: border-box;
}

:where(body) {
	margin: 0;
}

:where(h1, h2, h3, h4, h5, h6) {
	font-size: inherit;
	font-weight: inherit;
	margin-block: 0;
}

:where(input) {
	background-color: transparent;
	border-width: 0;
	color: inherit;
	font: inherit;
	margin: 0;
	padding: 0;
}

:where(select) {
	/* Layout */
	margin: 0;

	/* Text */
	font: inherit;
	letter-spacing: inherit;
	text-align: inherit;
	text-transform: inherit;
	white-space: inherit;
	word-spacing: inherit;

	/* Appearance */
	appearance: none;
	background-color: transparent;
	border-style: none;
	color: inherit;
}

</style>
<style is:global>

/* Variables */

@import "/src/layouts/default/style/variables.css";

</style>
<style is:global>

/* Patterns */

:where(:root) {
	--BackColor: Canvas;
	--FillColor: CanvasText;
	--TextColor: var(--FillColor);
	--EdgeColor: var(--FillColor);
	--EdgeSize: 1px;

	/* Radius Reference */
	--EdgeRadius: 3px;
	--RoundRadius: 999999px;
}

:where(svg) {
	fill: var(--FillColor);
}

</style>
<style is:global>

/* Application */

:root {
	@media (width <= 700px) {
		/* Reference */
		--max-height: 500px;
	}

	@media (width > 700px) {
		/* Reference */
		--max-height: 400px;
	}
}

body {
	margin: 1px;
}

.app {
	display: grid;

	/* Layout */
	overflow: hidden;

	/* Text */
	font: 100%/1.5 system-ui;

	/* Appearance */
	border-radius: var(--EdgeRadius);
	box-shadow: var(--EdgeColor) 0 0 0 var(--EdgeSize);

	/* Reference */
	--EdgeColor: var(--Grey600Color);
	--EdgeRadius: 6px;

	@media (width <= 700px) {
		/* Layout */
		grid-template-rows: 68--step auto;
	}

	@media (width > 700px) {
		/* Layout */
		grid-template-columns: auto 54--step;
	}

	& .sandbox-area,
	& .control-area {
		display: grid;

		/* Layout */
		block-size: 100%;
		grid-auto-rows: auto;
		overflow: hidden;
		padding-inline-start: 1px;
	}

	& .sandbox-area {
		@media (width >= 700px) {
			/* Appearance */
			border-end-start-radius: var(--EdgeRadius);
			border-start-start-radius: var(--EdgeRadius);
		}
	}

	& .control-area {
		max-block-size: var(--max-height);

		@media (width >= 700px) {
			/* Appearance */
			box-shadow: var(--EdgeColor) var(--EdgeSize) 0 0 0 inset;
		}

		@media (width >= 700px) {
			/* Appearance */
			border-end-end-radius: var(--EdgeRadius);
			border-start-end-radius: var(--EdgeRadius);
			box-shadow: var(--EdgeColor) var(--EdgeSize) 0 0 0 inset;
		}
	}
}

</style>
<script>
const resize = () => requestAnimationFrame(() => {
	const { height } = document.body.getBoundingClientRect()
	const newIframeHeight = `${height + 2}px`

	if (iframeHeight !== newIframeHeight) {
		iframe.style.setProperty('--y', iframeHeight = newIframeHeight)
	}
})

const iframe = window.parent.document.querySelector('.c-sandbox')! as HTMLIFrameElement

let iframeHeight = ''

visualViewport.addEventListener('resize', resize, { capture: true })

addEventListener('load', resize)

const { define } = CustomElementRegistry.prototype

Object.assign(CustomElementRegistry.prototype, {
	define(name: string, constructor: CustomElementConstructor) {
		define.call(this, name, constructor)
		resize()
	}
})
</script>