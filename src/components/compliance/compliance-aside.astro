---
import { For, When } from '@astropub/flow'
import { markdown } from '@astropub/md'
import { toNumeral, toStatusClassNames } from './compliance-utils'
import complianceFooter from 'project:data/compliance-footer.json'
import './compliance-aside.css'

export interface Props {
	compliance: typeof import('project:data/compliance.json')
}

const { props, url } = Astro as { props: Props, url: URL }
const { contents, version } = props.compliance

/** Compliance contents, filtered by the given url. */
const filteredContents = contents.reduce(
	(filteredContents: typeof contents, content) => {
		const rulesets = content.rulesets?.filter(
			ruleset => ruleset.link === url.pathname
		)!

		if (rulesets && rulesets.length) {
			filteredContents.push({ ...content, rulesets } as never)
		}

		return filteredContents
	},
	[]
)
---
<When match={filteredContents.length}>
	<aside class="p-compliance-aside">
		<header class="-header">
			<h2 class="-heading">{
				complianceFooter.data.title.data
			}</h2>
			<p class="-version">(v{
				version
			})</p>
		</header>

		<For of={filteredContents}>{content => (
			<section class="p-compliance">
				<For of={content.rulesets!}>{ruleset => (
					<dl class="-ruleset">
						<For of={ruleset.rules!}>{rule => (
							<dt class="-numeral">{
								toNumeral(content, ruleset, rule)
							}</dt>

							<dd class="-details">
								<span class="-content">{
									markdown.inline(rule.rule)
								}</span>

								<When a={rule.status !== 'current'} b={rule.status !== 'updated'} c={rule.status !== 'under-review'}>
									<span class={toStatusClassNames(rule)}>{
										rule.status
									}</span>
								</When>
							</dd>
						)}</For>
					</dl>
				)}</For>
			</section>
		)}</For>

		<footer class="-footer">
			<p>
				<a href={complianceFooter.data.link.data.url}>{
					complianceFooter.data.link.data.alt
				}</a>
			</p>
		</footer>
	</aside>
</When>