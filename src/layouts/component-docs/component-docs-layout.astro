---
import Layout from 'project:layouts/new-docs/new-docs-layout.astro'
import PageHeader from 'project:components/page-header/page-header.js'
// import Layout from 'project:layouts/docs/docs-layout.astro'
import globalData from 'project:data/global.json'
import PageAside from 'project:components/page-aside/page-aside.astro'
import './component-docs-layout.css'

const {
	components: {
		repository: GitHubRepoURL,
		repositoryBranch: GitHubRepoBranch,
	},
	storybook: {
		homepage: storybookURL,
	},
} = globalData

const {
	git: GitHubId,
	height: StorybookPreviewHeight,
	storybook: StorybookId,
} = Object(Astro.props.content)

const {content} = Astro.props;
const {headings} = Astro.props;

const secondaryNavigationConfig = 'secondary-navigation-config'
const secondaryNavigationTitle = 'secondary-navigation-title'
const getSecondaryNavigation = async () => {
	//grab the config file for any component page with secondary navigation
	if (content[secondaryNavigationConfig]) {
		return await import(content.file.replace(/[^/]+$/, content[secondaryNavigationConfig])).then(
			module => module.default
		)
	}
	return null
}

const secondaryNavigation = await getSecondaryNavigation()

const html = `<style>:root{--StorybookPreviewHeight:${StorybookPreviewHeight};}</style>`
---

<Layout content={{ title: content.title }} {...Astro.props}>
	<PageHeader slot="header">
		<PageHeader.Heading>
			{content.title}
		</PageHeader.Heading>
		<PageHeader.Subheading>
			{content.subtitle ? content.subtitle : null}
		</PageHeader.Subheading>
		{
			secondaryNavigation
				? <PageHeader.Nav>{
					//this lays out the navigation links at the top of the component page if they exist
					secondaryNavigation.map(
						navigationItem => {
							let navigationTitle = navigationItem[secondaryNavigationTitle]
							//if no navigation title is specified for an item, make one based on url
							if(!navigationTitle){
								const segments = navigationItem.url.split('/').filter((segment)=> segment != '')
								const title = segments.pop()
								navigationTitle = title
							}
							return <Fragment><a class={navigationItem.url === content.url ? 'current' : null} href={navigationItem.url}>{navigationTitle}</a></Fragment>
						}
					)
				}</PageHeader.Nav>
			: null
		}
	</PageHeader>

	<Fragment slot="toolbar">
	</Fragment>

	<Fragment set:html={html} />
	<slot />

	<Fragment slot="aside">
		<PageAside {...Astro.props} />
	</Fragment>
</Layout>
<!-- <Layout {...Astro.props}>
	<Fragment set:html={html} />
	<slot />
</Layout> -->
<script define:vars={{ GitHubId, GitHubRepoURL, GitHubRepoBranch, StorybookId, storybookURL }}>
const template = document.createElement('template')

template.innerHTML = [
	`<div class="demo-container">`,
	`<iframe id="live-sample" scrolling="yes" src="#preview"></iframe>`,
	`<div class="demo-container__sample-links">`,
		`<a href="#storybook" target="_blank" class="sample-links__storybook">Storybook</a>`,
		`<a href="#github" target="_blank" class="sample-links__github">Github</a>`,
	`</div>`,
	`</div>`
].join('')

for (const el of document.querySelectorAll('.storybook-demo')) {
	const content = template.content.cloneNode(true)

	content.querySelector('[src="#preview"]').src = `${storybookURL}iframe.html?id=${StorybookId}&viewMode=story`
	content.querySelector('[href="#storybook"]').href = `${storybookURL}?path=/story/${StorybookId}`
	content.querySelector('[href="#github"]').href = `${GitHubRepoURL}/tree/${GitHubRepoBranch}/packages/web-components/src/components/${GitHubId}`

	el.append(content)
}

for (const el of document.querySelectorAll('.tab-content')) {
	const content = template.content.cloneNode(true)

	content.querySelector('[src="#preview"]').src = `${storybookURL}iframe.html?id=${StorybookId}&viewMode=story`
	content.querySelector('[href="#storybook"]').href = `${storybookURL}?path=/story/${StorybookId}`
	content.querySelector('[href="#github"]').href = `${GitHubRepoURL}/tree/${GitHubRepoBranch}/packages/web-components/src/components/${GitHubId}`

	el.append(content)
}
</script>