---
import { For } from '@astropub/flow'
import Layout from 'project:layouts/new-docs/new-docs-layout.astro'
import PageHeader from 'project:components/page-header/page-header.js'
// import Layout from 'project:layouts/docs/docs-layout.astro'
import globalData from 'project:data/global.json'
import PageAside from 'project:components/page-aside/page-aside.astro'
import AssetStatus from 'project:components/asset-status/asset-status.astro'
import './component-docs-layout.css'
import ComplianceAside from 'project:components/compliance/compliance-aside.astro'
import ContributionFooter from 'project:components/contribution-footer/contribution-footer.astro'

import complianceData from 'project:data/compliance.json'

const {
	components: {
		repository: GitHubRepoURL,
		repositoryBranch: GitHubRepoBranch,
	},
	storybook: {
		homepage: storybookURL,
	},
} = globalData

const {
	git: GitHubId,
	height: StorybookPreviewHeight,
	storybook: StorybookId,
} = Object(Astro.props.content)

const { content } = Astro.props

/** RegEx to match a slash (/) at the end ($) of a string. */
const matchTrailingSlash = /\/$/

/** Removes the trailing slash from a string. */
const withoutTrailingSlash = (value: string) => value.replace(matchTrailingSlash, '')

/* grab the source file url and then get the extension */
const fileName = new URL(Astro.props.file, 'file:').toString()
const fileExt = fileName.split('.').at(-1)

const html = `<style>:root{--StorybookPreviewHeight:${StorybookPreviewHeight};}</style>`

/** URL to the current source for this page. */
const githubSourceURL = `${globalData.designSystem.repository}/tree/${globalData.designSystem.repositoryBranch}/src/pages${withoutTrailingSlash(Astro.url.pathname)}.${fileExt}`
---
<Layout content={{ title: content.title }} {...Astro.props}>
	<PageHeader slot="header">
		<PageHeader.Heading>
			{content.title}
		</PageHeader.Heading>
		<PageHeader.Subheading>
			{content.description ? content.description : null}
		</PageHeader.Subheading>
		<div class="nav-holder">
		{
			content.config
				? (
					<PageHeader.Nav file={Astro.props.file} />
				)
			: null
		}
		</div>
	</PageHeader>

	<Fragment slot="toolbar">
	</Fragment>

	<Fragment set:html={html} />
	<slot />
	<AssetStatus {...Astro.props}/>
	<ComplianceAside compliance={complianceData} />
	<ContributionFooter sourceurl={githubSourceURL} />

	<Fragment slot="aside">
		<PageAside {...Astro.props} />
	</Fragment>
	
</Layout>
<!-- <Layout {...Astro.props}>
	<Fragment set:html={html} />
	<slot />
</Layout> -->
<script define:vars={{ GitHubId, GitHubRepoURL, GitHubRepoBranch, StorybookId, storybookURL }}>
const template = document.createElement('template')

template.innerHTML = [
	`<div class="demo-container">`,
	`<iframe id="live-sample" scrolling="yes" src="#preview"></iframe>`,
	`<div class="demo-container__sample-links">`,
		`<a href="#storybook" target="_blank" class="sample-links__storybook">Storybook</a>`,
		`<a href="#github" target="_blank" class="sample-links__github">Github</a>`,
	`</div>`,
	`</div>`
].join('')

for (const el of document.querySelectorAll('.storybook-demo')) {
	const content = template.content.cloneNode(true)

	content.querySelector('[src="#preview"]').src = `${storybookURL}iframe.html?id=${StorybookId}&viewMode=story`
	content.querySelector('[href="#storybook"]').href = `${storybookURL}?path=/story/${StorybookId}`
	content.querySelector('[href="#github"]').href = `${GitHubRepoURL}/tree/${GitHubRepoBranch}/packages/web-components/src/components/${GitHubId}`

	el.append(content)
}

for (const el of document.querySelectorAll('.tab-content')) {
	const content = template.content.cloneNode(true)

	content.querySelector('[src="#preview"]').src = `${storybookURL}iframe.html?id=${StorybookId}&viewMode=story`
	content.querySelector('[href="#storybook"]').href = `${storybookURL}?path=/story/${StorybookId}`
	content.querySelector('[href="#github"]').href = `${GitHubRepoURL}/tree/${GitHubRepoBranch}/packages/web-components/src/components/${GitHubId}`

	el.append(content)
}
</script>